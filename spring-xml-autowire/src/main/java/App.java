import model.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {


    public static void main(String[] args) {

        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("META-INF/application-context.xml");

        //normal bean usage
        Student student = applicationContext.getBean("studentId", Student.class);
        System.out.println(student.toString());

        //auto wire by name
        /**
         * How auto wire by name is working?
         * 1.get a name of a particular setter method.
         * 2.remove the 'set' section from the name.
         * 3.convert the first  letter to lower case.
         * 4.search for a bean which has the id equal to the resultant name.
         * 5.inject the founded bean in to the property.
         *
         * */
        StudentAutoWireBhName studentAutoWireBhName = applicationContext.getBean("studentAutoWireBhNameId", StudentAutoWireBhName.class);
        System.out.println(studentAutoWireBhName.toString());


        //auto wiring by type
        /**
         * How auto wire by type is working ?
         * 1. get the type of the property
         * 2.search for a bean which have same type.
         * 3.if found inject that bean in to the property. If not do nothing.
         * 4.if multiple beans found with corresponding type error will be given.
         *To demonstrate this functionality please comment out all the school bean except one and comment out all address beans except one.
         *
         * */
         StudentAutoWireByType studentAutoWireByType = applicationContext.getBean("studentAutoWireByTypeId", StudentAutoWireByType.class);
         System.out.println(studentAutoWireByType.toString());


        //auto wiring by constructor

        /**
         * How auto wire by constructor is working ?
         * 1.get the type of a constructor argument(selecting the constructor with most arguments).
         * 2.search for a bean which have same type.
         * 3.if found inject that bean in to the contructor argument. if not give error.
         * 4.f multiple beans found with corresponding type error will be given.
         *
         *
         *
         * */
        StudentAutoWireByConstrcutor studentAutoWireByConstrcutor = applicationContext.getBean("studentAutoWireByConstrcutorId", StudentAutoWireByConstrcutor.class);
        System.out.println(studentAutoWireByConstrcutor.toString());


        //auto wiring by default
        /**
         *
         * to be researched.
         *
         * */
//        StudentAutoWireByAutoDetect studentAutoWireByAutoDetect = applicationContext.getBean("studentAutoWireByAutoDetectId", StudentAutoWireByAutoDetect.class);
//        System.out.println(studentAutoWireByAutoDetect.toString());

        ((ClassPathXmlApplicationContext) applicationContext).close();


    }
}
